{
  "version": 3,
  "sources": ["../js/core/constants.js", "../js/core/state.js", "../js/ui/domElements.js", "../js/canvas/canvasContext.js", "../js/canvas/undoRedo.js", "../js/tools/brush.js", "../js/tools/eraser.js", "../js/tools/textTool.js", "../js/tools/toolManager.js", "../js/ui/toolbarController.js", "../js/utils/storage.js", "../js/ui/firstRunGuide.js", "../js/canvas/inputHandler.js", "../js/canvas/eventBinder.js", "../js/main.js"],
  "sourcesContent": ["/**\r\n * @fileoverview Defines constant values used throughout the extension.\r\n */\r\n\r\nexport const BOARD_ID = 'overdraw-board';\r\nexport const CANVAS_ID = 'overdraw-canvas';\r\nexport const TOOLBAR_ID = 'overdraw-toolbar';\r\nexport const GUIDE_MODAL_ID = 'overdraw-guide-modal';\r\nexport const TEXT_INPUT_ID = 'overdraw-text-input';\r\n\r\nexport const DEFAULT_COLOR = '#000000'; // Black\r\nexport const DEFAULT_BRUSH_SIZE = 5;\r\nexport const DEFAULT_TEXT_SIZE = 16; // Font size in px\r\nexport const DEFAULT_FONT = 'Arial';\r\n\r\nexport const TOOL_BRUSH = 'brush';\r\nexport const TOOL_ERASER = 'eraser';\r\nexport const TOOL_TEXT = 'text';\r\n\r\nexport const STORAGE_KEY_GUIDE_SEEN = 'overdrawGuideSeen';", "/**\r\n * @fileoverview Manages the global state of the drawing application.\r\n */\r\nimport { DEFAULT_COLOR, DEFAULT_BRUSH_SIZE, TOOL_BRUSH, DEFAULT_TEXT_SIZE, DEFAULT_FONT } from './constants.js';\r\n\r\nlet appState = {\r\n    isExtensionEnabled: false, // Overall F9 enable/disable state\r\n    isBoardActive: false,     // Tracks if the board elements are currently visible and interactive (after F9 enable and not minimized)\r\n    isToolbarMinimized: false,\r\n    currentTool: TOOL_BRUSH,\r\n    currentColor: DEFAULT_COLOR,\r\n    currentBrushSize: DEFAULT_BRUSH_SIZE,\r\n    currentTextSize: DEFAULT_TEXT_SIZE,\r\n    currentFont: DEFAULT_FONT,\r\n    isDrawing: false,\r\n    lastX: 0,\r\n    lastY: 0,\r\n    activeTouches: [],\r\n};\r\n\r\n/**\r\n * Gets the current application state.\r\n * @returns {object} The current state.\r\n */\r\nexport function getState() {\r\n    return appState;\r\n}\r\n\r\n/**\r\n * Updates one or more properties of the application state.\r\n * @param {object} newStateProperties - An object with properties to update.\r\n */\r\nexport function updateState(newStateProperties) {\r\n    appState = { ...appState, ...newStateProperties };\r\n    // console.log('State updated:', appState); // For debugging\r\n}\r\n\r\n/**\r\n * Resets drawing-related state (e.g., when mouse/touch up).\r\n */\r\nexport function resetDrawingState() {\r\n    updateState({ isDrawing: false, activeTouches: [] });\r\n}", "/**\r\n * @fileoverview Functions to create the main DOM elements for the extension.\r\n */\r\nimport { BOARD_ID, CANVAS_ID, TOOLBAR_ID, DEFAULT_COLOR, DEFAULT_BRUSH_SIZE, TOOL_BRUSH, TOOL_ERASER, TOOL_TEXT, DEFAULT_TEXT_SIZE } from '../core/constants.js';\r\n\r\n/**\r\n * Creates the drawing board (canvas container) and appends it to the body.\r\n * @returns {HTMLElement} The created board element.\r\n */\r\nexport function createBoardElement() {\r\n    let board = document.getElementById(BOARD_ID);\r\n    if (board) return board;\r\n\r\n    board = document.createElement('div');\r\n    board.id = BOARD_ID;\r\n\r\n    const canvas = document.createElement('canvas');\r\n    canvas.id = CANVAS_ID;\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n\r\n    board.appendChild(canvas);\r\n    document.body.appendChild(board);\r\n    return board;\r\n}\r\n\r\n/**\r\n * Creates the toolbar and appends it to the body.\r\n * @returns {HTMLElement} The created toolbar element.\r\n */\r\nexport function createToolbarElement() {\r\n    let toolbar = document.getElementById(TOOLBAR_ID);\r\n    if (toolbar) return toolbar;\r\n\r\n    toolbar = document.createElement('div');\r\n    toolbar.id = TOOLBAR_ID;\r\n\r\n    // Keep the new tool layout and add the minimize button\r\n    toolbar.innerHTML = `\r\n        <div class=\"tool-group\">\r\n            <button data-tool=\"${TOOL_BRUSH}\" title=\"Brush\" class=\"active-tool\">\u270F\uFE0F</button>\r\n            <button data-tool=\"${TOOL_ERASER}\" title=\"Eraser\">\uD83E\uDDFC</button>\r\n            <button data-tool=\"${TOOL_TEXT}\" title=\"Text\">T</button>\r\n        </div>\r\n        <div class=\"tool-group\">\r\n            <label for=\"overdraw-color-picker\">Color:</label>\r\n            <input type=\"color\" id=\"overdraw-color-picker\" value=\"${DEFAULT_COLOR}\" title=\"Color Picker\">\r\n        </div>\r\n        <div class=\"tool-group\">\r\n            <label for=\"overdraw-brush-size\">Size:</label>\r\n            <input type=\"range\" id=\"overdraw-brush-size\" min=\"1\" max=\"50\" value=\"${DEFAULT_BRUSH_SIZE}\" title=\"Brush Size\">\r\n            <span id=\"overdraw-brush-size-value\">${DEFAULT_BRUSH_SIZE}px</span>\r\n        </div>\r\n        <div class=\"tool-group\">\r\n             <label for=\"overdraw-text-size\">Text Size:</label>\r\n            <input type=\"range\" id=\"overdraw-text-size\" min=\"8\" max=\"72\" value=\"${DEFAULT_TEXT_SIZE}\" title=\"Text Size\">\r\n            <span id=\"overdraw-text-size-value\">${DEFAULT_TEXT_SIZE}px</span>\r\n        </div>\r\n        <div class=\"tool-group\">\r\n            <button id=\"overdraw-undo\" title=\"Undo (Ctrl+Z)\">\u21A9\uFE0F</button>\r\n            <button id=\"overdraw-redo\" title=\"Redo (Ctrl+Y)\">\u21AA\uFE0F</button>\r\n        </div>\r\n        <div class=\"tool-group\">\r\n            <button id=\"overdraw-clear\" title=\"Clear Canvas\">\uD83D\uDDD1\uFE0F</button>\r\n        </div>\r\n        <button id=\"overdraw-minimize\" title=\"Minimize/Expand Board\"><=</button> <!-- Added Minimize Button -->\r\n    `;\r\n    document.body.appendChild(toolbar);\r\n    return toolbar;\r\n}", "/**\r\n * @fileoverview Manages the canvas element and its 2D rendering context.\r\n */\r\nimport { CANVAS_ID } from '../core/constants.js';\r\nimport { updateState, getState } from '../core/state.js';\r\n\r\nlet canvas = null;\r\nlet ctx = null;\r\n\r\n/**\r\n * Initializes the canvas and its 2D context.\r\n * Sets initial drawing properties.\r\n * @returns {{canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D} | null}\r\n */\r\nexport function initializeCanvas() {\r\n    canvas = document.getElementById(CANVAS_ID);\r\n    if (!canvas) {\r\n        console.error('Canvas element not found!');\r\n        return null;\r\n    }\r\n    ctx = canvas.getContext('2d', { willReadFrequently: true });\r\n    if (!ctx) {\r\n        console.error('Failed to get 2D context from canvas!');\r\n        return null;\r\n    }\r\n\r\n    // Set initial canvas dimensions based on the board/window\r\n    const boardElement = canvas.parentElement;\r\n    if (boardElement) {\r\n        canvas.width = boardElement.clientWidth;\r\n        canvas.height = boardElement.clientHeight;\r\n    } else {\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n    }\r\n\r\n\r\n    ctx.lineCap = 'round';\r\n    ctx.lineJoin = 'round';\r\n    // Initial state set by state.js, but ensure ctx reflects it\r\n    updateState({});\r\n    const state = getState();\r\n    ctx.strokeStyle = state.currentColor;\r\n    ctx.lineWidth = state.currentBrushSize;\r\n    ctx.fillStyle = state.currentColor; // For text and fill operations\r\n    ctx.font = `${state.currentTextSize}px ${state.currentFont}`;\r\n\r\n\r\n    console.log('Canvas initialized');\r\n    return { canvas, ctx };\r\n}\r\n\r\n/**\r\n * Gets the current canvas element.\r\n * @returns {HTMLCanvasElement | null}\r\n */\r\nexport function getCanvas() {\r\n    return canvas;\r\n}\r\n\r\n/**\r\n * Gets the current 2D rendering context.\r\n * @returns {CanvasRenderingContext2D | null}\r\n */\r\nexport function getContext() {\r\n    return ctx;\r\n}\r\n\r\n/**\r\n * Clears the entire canvas.\r\n */\r\nexport function clearDrawingArea() {\r\n    if (ctx && canvas) {\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    } else {\r\n        console.error('Context or Canvas not available for clearing.');\r\n    }\r\n}\r\n\r\n/**\r\n * Resizes the canvas, attempting to preserve its content.\r\n */\r\nexport function resizeCanvas() {\r\n    if (!canvas || !ctx) return;\r\n\r\n    const boardElement = canvas.parentElement;\r\n    if (!boardElement) return;\r\n\r\n    // Save current content\r\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n\r\n    canvas.width = boardElement.clientWidth;\r\n    canvas.height = boardElement.clientHeight;\r\n\r\n    // Restore content\r\n    ctx.putImageData(imageData, 0, 0);\r\n\r\n    // Re-apply drawing styles as context might reset\r\n    updateState({});\r\n    const state = getState();\r\n    ctx.lineCap = 'round';\r\n    ctx.lineJoin = 'round';\r\n    ctx.strokeStyle = state.currentColor;\r\n    ctx.lineWidth = state.currentBrushSize;\r\n    ctx.fillStyle = state.currentColor;\r\n    ctx.font = `${state.currentTextSize}px ${state.currentFont}`;\r\n}", "/**\r\n * @fileoverview Manages undo and redo functionality for the canvas.\r\n */\r\n\r\nlet undoStack = [];\r\nlet redoStack = [];\r\nconst MAX_HISTORY_STATES = 30; // Limit history size\r\n\r\n/**\r\n * Records the current state of the canvas for undo.\r\n * @param {HTMLCanvasElement} canvas - The canvas element.\r\n */\r\nexport function recordCanvasState(canvas) {\r\n    if (!canvas) return;\r\n    if (undoStack.length >= MAX_HISTORY_STATES) {\r\n        undoStack.shift(); // Remove the oldest state\r\n    }\r\n    undoStack.push(canvas.toDataURL());\r\n    redoStack = []; // Clear redo stack on new action\r\n    updateUndoRedoButtonStates();\r\n}\r\n\r\n/**\r\n * Undoes the last action on the canvas.\r\n * @param {HTMLCanvasElement} canvas - The canvas element.\r\n * @param {CanvasRenderingContext2D} ctx - The 2D rendering context.\r\n */\r\nexport function undoLastAction(canvas, ctx) {\r\n    if (undoStack.length <= 1) return; // Need at least one state to revert to (initial is often blank)\r\n\r\n    const lastState = undoStack.pop();\r\n    if (lastState) redoStack.push(lastState);\r\n\r\n    const prevStateDataUrl = undoStack[undoStack.length - 1];\r\n    if (prevStateDataUrl) {\r\n        const img = new Image();\r\n        img.onload = () => {\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            ctx.drawImage(img, 0, 0);\r\n        };\r\n        img.src = prevStateDataUrl;\r\n    }\r\n    updateUndoRedoButtonStates();\r\n}\r\n\r\n/**\r\n * Redoes the last undone action on the canvas.\r\n * @param {HTMLCanvasElement} canvas - The canvas element.\r\n * @param {CanvasRenderingContext2D} ctx - The 2D rendering context.\r\n */\r\nexport function redoLastAction(canvas, ctx) {\r\n    if (redoStack.length === 0) return;\r\n\r\n    const nextStateDataUrl = redoStack.pop();\r\n    if (nextStateDataUrl) {\r\n        undoStack.push(nextStateDataUrl);\r\n        const img = new Image();\r\n        img.onload = () => {\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            ctx.drawImage(img, 0, 0);\r\n        };\r\n        img.src = nextStateDataUrl;\r\n    }\r\n    updateUndoRedoButtonStates();\r\n}\r\n\r\n/**\r\n * Resets the undo/redo history.\r\n * @param {HTMLCanvasElement} canvas - The canvas element (to record initial blank state).\r\n */\r\nexport function resetUndoRedoHistory(canvas) {\r\n    undoStack = [];\r\n    redoStack = [];\r\n    if (canvas) { // Record initial blank state\r\n        setTimeout(() => recordCanvasState(canvas), 0); // Allow canvas to render\r\n    }\r\n    updateUndoRedoButtonStates();\r\n}\r\n\r\n\r\n/**\r\n * Updates the disabled state of undo/redo buttons based on stack lengths.\r\n */\r\nfunction updateUndoRedoButtonStates() {\r\n    const undoButton = document.getElementById('overdraw-undo');\r\n    const redoButton = document.getElementById('overdraw-redo');\r\n\r\n    if (undoButton) {\r\n        undoButton.disabled = undoStack.length <= 1;\r\n    }\r\n    if (redoButton) {\r\n        redoButton.disabled = redoStack.length === 0;\r\n    }\r\n}", "/**\r\n * @fileoverview Logic for the Brush drawing tool.\r\n */\r\nimport { getContext } from '../canvas/canvasContext.js';\r\nimport { getState } from '../core/state.js';\r\n\r\n/**\r\n * Draws a line segment using the brush tool.\r\n * @param {number} x1 - Starting X coordinate.\r\n * @param {number} y1 - Starting Y coordinate.\r\n * @param {number} x2 - Ending X coordinate.\r\n * @param {number} y2 - Ending Y coordinate.\r\n */\r\nexport function drawWithBrush(x1, y1, x2, y2) {\r\n    const ctx = getContext();\r\n    const state = getState();\r\n    if (!ctx) return;\r\n\r\n    ctx.globalCompositeOperation = 'source-over'; // Normal drawing mode\r\n    ctx.strokeStyle = state.currentColor;\r\n    ctx.lineWidth = state.currentBrushSize;\r\n\r\n    // If x1,y1 are same as x2,y2, draw a small circle (dot)\r\n    if (x1 === x2 && y1 === y2) {\r\n        ctx.beginPath(); // Start a new path for the dot\r\n        ctx.arc(x1, y1, state.currentBrushSize / 2, 0, Math.PI * 2);\r\n        ctx.fillStyle = state.currentColor; // Use fill for a solid dot\r\n        ctx.fill();\r\n    } else {\r\n        // For continuous drawing, ensure beginPath was called by inputHandler\r\n        ctx.lineTo(x2, y2);\r\n        ctx.stroke();\r\n    }\r\n}", "/**\r\n * @fileoverview Logic for the Eraser tool.\r\n */\r\nimport { getContext } from '../canvas/canvasContext.js';\r\nimport { getState } from '../core/state.js';\r\n\r\n/**\r\n * Erases a line segment on the canvas.\r\n * @param {number} x1 - Starting X coordinate.\r\n * @param {number} y1 - Starting Y coordinate.\r\n * @param {number} x2 - Ending X coordinate.\r\n * @param {number} y2 - Ending Y coordinate.\r\n */\r\nexport function eraseArea(x1, y1, x2, y2) {\r\n    const ctx = getContext();\r\n    const state = getState();\r\n    if (!ctx) return;\r\n\r\n    ctx.globalCompositeOperation = 'destination-out'; // Erasing mode\r\n    ctx.lineWidth = state.currentBrushSize; // Eraser size uses brush size\r\n\r\n    // If x1,y1 are same as x2,y2, erase a small circle (dot)\r\n    if (x1 === x2 && y1 === y2) {\r\n        ctx.beginPath(); // Start a new path for the dot\r\n        ctx.arc(x1, y1, state.currentBrushSize / 2, 0, Math.PI * 2);\r\n        ctx.fill(); // Fill with transparency in destination-out mode\r\n    } else {\r\n        ctx.lineTo(x2, y2);\r\n        ctx.stroke();\r\n    }\r\n}", "/**\n * @fileoverview Logic for the Text drawing tool.\n */\nimport { getContext, getCanvas } from '../canvas/canvasContext.js';\nimport { getState, updateState } from '../core/state.js';\nimport { TEXT_INPUT_ID } from '../core/constants.js';\nimport { recordCanvasState } from '../canvas/undoRedo.js';\n\nlet textInputElement = null;\nlet textInputCallback = null; // To call after text is placed\n\n/**\n * Activates the text tool, preparing for user input.\n * @param {number} initialX - The X coordinate where the text tool was activated (click position).\n * @param {number} initialY - The Y coordinate where the text tool was activated.\n */\nexport function activateTextMode(initialX, initialY) {\n    try {\n        const canvas = getCanvas();\n        if (!canvas) throw new Error(\"Canvas not found in activateTextMode\");\n\n        if (textInputElement) {\n            deactivateTextMode(false);\n        }\n\n        textInputElement = document.createElement('textarea');\n        textInputElement.id = TEXT_INPUT_ID;\n        textInputElement.style.position = 'fixed';\n\n        textInputElement.style.left = `${initialX}px`;\n        textInputElement.style.top = `${initialY}px`;\n\n        const state = getState();\n        textInputElement.style.fontSize = `${state.currentTextSize}px`;\n        textInputElement.style.fontFamily = state.currentFont;\n        textInputElement.style.color = state.currentColor;\n        textInputElement.style.lineHeight = `${state.currentTextSize * 1.2}px`;\n        textInputElement.style.minWidth = '50px';\n        textInputElement.style.minHeight = `${state.currentTextSize * 1.2}px`;\n        textInputElement.value = '';\n\n        document.body.appendChild(textInputElement);\n        textInputElement.focus();\n\n        // Restore only the keydown handler\n        // textInputElement.addEventListener('blur', handleTextInputBlur);\n        textInputElement.addEventListener('keydown', handleTextInputKeyDown);\n        console.log(\"Text tool activated at\", initialX, initialY);\n    } catch (err) {\n        console.error(\"Error in activateTextMode:\", err);\n    }\n}\n\n/**\n * Handles the blur event from the text input field.\n */\nfunction handleTextInputBlur() {\n    placeTextOnCanvas();\n}\n\n/**\n * Handles keydown events in the text input field (e.g., Enter).\n * @param {KeyboardEvent} event\n */\nfunction handleTextInputKeyDown(event) {\n    if (event.key === 'Enter' && !event.shiftKey) { // Enter to confirm, Shift+Enter for newline\n        event.preventDefault(); // Prevent new line in textarea\n        placeTextOnCanvas();\n    } else if (event.key === 'Escape') {\n        deactivateTextMode(false); // Cancel text input\n    }\n}\n\n/**\n * Places the text from the input field onto the canvas.\n */\nfunction placeTextOnCanvas() {\n    try {\n        if (!textInputElement || !textInputElement.value.trim()) {\n            deactivateTextMode(false);\n            return;\n        }\n\n        const ctx = getContext();\n        const canvas = getCanvas();\n        const state = getState();\n        if (!ctx || !canvas) throw new Error(\"Canvas or context not found in placeTextOnCanvas\");\n\n        const text = textInputElement.value;\n        const x = parseFloat(textInputElement.style.left);\n        const y = parseFloat(textInputElement.style.top);\n\n        ctx.globalCompositeOperation = 'source-over';\n        ctx.fillStyle = state.currentColor;\n        ctx.font = `${state.currentTextSize}px ${state.currentFont}`;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'alphabetic';\n\n        const lines = text.split('\\n');\n        lines.forEach((line, index) => {\n            ctx.fillText(line, x, y + (index * state.currentTextSize * 1.2));\n        });\n\n        recordCanvasState(canvas);\n        deactivateTextMode(true);\n    } catch (err) {\n        console.error(\"Error in placeTextOnCanvas:\", err);\n    }\n}\n\n\n/**\n * Deactivates the text tool and removes the input element.\n * @param {boolean} textWasPlaced - Whether text was actually drawn on the canvas.\n */\nexport function deactivateTextMode(textWasPlaced) {\n    try {\n        if (textInputElement) {\n            // textInputElement.removeEventListener('blur', handleTextInputBlur);\n            // textInputElement.removeEventListener('keydown', handleTextInputKeyDown);\n            textInputElement.remove();\n            textInputElement = null;\n            console.log(\"Text tool deactivated.\");\n        }\n    } catch (err) {\n        console.error(\"Error in deactivateTextMode:\", err);\n    }\n}", "/**\r\n * @fileoverview Manages the currently active drawing tool and delegates actions.\r\n */\r\nimport { getState, updateState } from '../core/state.js';\r\nimport { getContext, getCanvas } from '../canvas/canvasContext.js';\r\nimport { TOOL_BRUSH, TOOL_ERASER, TOOL_TEXT, TEXT_INPUT_ID } from '../core/constants.js';\r\nimport { drawWithBrush } from './brush.js';\r\nimport { eraseArea } from './eraser.js';\r\nimport { activateTextMode, deactivateTextMode } from './textTool.js';\r\n\r\nlet justCreated = false;\r\n\r\n/**\r\n * Sets the current drawing tool.\r\n * @param {string} toolName - The name of the tool (e.g., TOOL_BRUSH).\r\n */\r\nexport function setCurrentTool(toolName) {\r\n    deactivateTextToolIfNeeded(); // Deactivate text tool if switching away from it\r\n\r\n    updateState({ currentTool: toolName });\r\n    console.log(`Tool changed to: ${toolName}`);\r\n\r\n    // Update cursor style\r\n    const canvas = getCanvas();\r\n    if (canvas) {\r\n        switch (toolName) {\r\n            case TOOL_BRUSH:\r\n            case TOOL_ERASER: // Eraser can also use crosshair or a custom eraser cursor\r\n                canvas.style.cursor = 'crosshair';\r\n                break;\r\n            case TOOL_TEXT:\r\n                canvas.style.cursor = 'text';\r\n                break;\r\n            default:\r\n                canvas.style.cursor = 'default';\r\n        }\r\n    }\r\n    updateActiveToolButton(toolName);\r\n}\r\n\r\n/**\r\n * Applies the current tool's drawing logic.\r\n * @param {number} x1 - Starting X (or click X for text).\r\n * @param {number} y1 - Starting Y (or click Y for text).\r\n * @param {number} [x2] - Ending X (for line tools).\r\n * @param {number} [y2] - Ending Y (for line tools).\r\n */\r\nexport function applyCurrentTool(x1, y1, x2, y2) {\r\n    const state = getState();\r\n    switch (state.currentTool) {\r\n        case TOOL_BRUSH:\r\n            drawWithBrush(x1, y1, x2, y2);\r\n            break;\r\n        case TOOL_ERASER:\r\n            eraseArea(x1, y1, x2, y2);\r\n            break;\r\n        case TOOL_TEXT:\r\n            // For text tool, x1, y1 are the click coordinates to place the input\r\n            activateTextMode(x1, y1);\r\n            break;\r\n    }\r\n}\r\n\r\n/**\r\n * Deactivates the text tool if it's currently active and value needs to be placed or discarded.\r\n */\r\nexport function deactivateTextToolIfNeeded() {\r\n    const state = getState();\r\n    if (state.currentTool === TOOL_TEXT) {\r\n        // The textTool's internal blur/enter handlers should manage placement.\r\n        // This function is more a safeguard or for explicit deactivation.\r\n        // It might be better to let textTool manage its own lifecycle fully.\r\n        // For now, let's assume if we are starting a new action (like mousedown for brush)\r\n        // the text tool should finalize.\r\n        const textInputElement = document.getElementById(TEXT_INPUT_ID);\r\n        if (textInputElement && document.activeElement === textInputElement) {\r\n            textInputElement.blur(); // This will trigger placeTextOnCanvas or deactivateTextMode\r\n        } else if (textInputElement) {\r\n            deactivateTextMode(false); // If not focused, just remove it\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Updates the visual state of tool buttons in the toolbar.\r\n * @param {string} activeToolName - The name of the currently active tool.\r\n */\r\nfunction updateActiveToolButton(activeToolName) {\r\n    const toolbar = document.getElementById('overdraw-toolbar');\r\n    if (!toolbar) return;\r\n\r\n    const toolButtons = toolbar.querySelectorAll('button[data-tool]');\r\n    toolButtons.forEach(button => {\r\n        if (button.dataset.tool === activeToolName) {\r\n            button.classList.add('active-tool');\r\n        } else {\r\n            button.classList.remove('active-tool');\r\n        }\r\n    });\r\n}\r\n\r\nexport function handleMouseDown(event) {\r\n    if (event.button !== 0) return; // Only main (left) click\r\n\r\n    const state = getState();\r\n\r\n    // Only deactivate text tool if switching away from it\r\n    if (state.currentTool !== TOOL_TEXT) {\r\n        deactivateTextToolIfNeeded();\r\n    }\r\n\r\n    const { x, y } = getMousePosition(event);\r\n    const ctx = getContext();\r\n\r\n    updateState({ isDrawing: true, lastX: x, lastY: y });\r\n\r\n    if (state.currentTool !== TOOL_TEXT) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(x, y);\r\n        // For tools like brush/eraser, apply might draw a dot on click\r\n        applyCurrentTool(x, y, x, y); // Draw a dot if tool supports it\r\n    } else {\r\n        // Text tool handles its own click logic via toolManager\r\n        applyCurrentTool(x, y);\r\n    }\r\n}\r\n\r\nfunction handleTextInputBlur() {\r\n    if (justCreated) {\r\n        justCreated = false;\r\n        textInputElement.focus();\r\n        return;\r\n    }\r\n    placeTextOnCanvas();\r\n}", "/**\r\n * @fileoverview Handles events and updates for the toolbar UI.\r\n */\r\nimport { getState, updateState } from '../core/state.js';\r\nimport { clearDrawingArea, getContext, getCanvas, resizeCanvas } from '../canvas/canvasContext.js';\r\nimport { undoLastAction, redoLastAction, resetUndoRedoHistory } from '../canvas/undoRedo.js';\r\nimport { setCurrentTool, deactivateTextToolIfNeeded } from '../tools/toolManager.js';\r\nimport { TOOLBAR_ID, BOARD_ID } from '../core/constants.js';\r\n\r\nlet toolbarElement = null;\r\nlet boardElementRef = null; // Reference to the board element for minimize functionality\r\n\r\n/**\r\n * Initializes the toolbar event listeners.\r\n */\r\nexport function initializeToolbar() {\r\n    toolbarElement = document.getElementById(TOOLBAR_ID);\r\n    boardElementRef = document.getElementById(BOARD_ID); // Get board reference\r\n\r\n    if (!toolbarElement || !boardElementRef) {\r\n        console.error('Toolbar or Board element not found for initialization.');\r\n        return;\r\n    }\r\n\r\n    // Tool selection\r\n    toolbarElement.addEventListener('click', (event) => {\r\n        try {\r\n            const button = event.target.closest('button[data-tool]');\r\n            if (button && button.dataset.tool) {\r\n                deactivateTextToolIfNeeded(); // Ensure text tool is finalized before switching\r\n                setCurrentTool(button.dataset.tool);\r\n            }\r\n        } catch (err) {\r\n            console.error('Error handling toolbar click:', err);\r\n        }\r\n    });\r\n\r\n    // Color picker\r\n    const colorPicker = toolbarElement.querySelector('#overdraw-color-picker');\r\n    if (colorPicker) {\r\n        colorPicker.addEventListener('input', handleColorChange);\r\n        colorPicker.addEventListener('change', handleColorChangeFinal);\r\n    }\r\n\r\n    // Brush size slider\r\n    const brushSizeSlider = toolbarElement.querySelector('#overdraw-brush-size');\r\n    const brushSizeValueDisplay = toolbarElement.querySelector('#overdraw-brush-size-value');\r\n    if (brushSizeSlider && brushSizeValueDisplay) {\r\n        brushSizeSlider.addEventListener('input', (event) => {\r\n            const newSize = parseInt(event.target.value, 10);\r\n            updateState({ currentBrushSize: newSize });\r\n            brushSizeValueDisplay.textContent = `${newSize}px`;\r\n            const ctx = getContext();\r\n            if (ctx) ctx.lineWidth = newSize;\r\n        });\r\n    }\r\n\r\n    // Text size slider\r\n    const textSizeSlider = toolbarElement.querySelector('#overdraw-text-size');\r\n    const textSizeValueDisplay = toolbarElement.querySelector('#overdraw-text-size-value');\r\n    if (textSizeSlider && textSizeValueDisplay) {\r\n        textSizeSlider.addEventListener('input', (event) => {\r\n            const newSize = parseInt(event.target.value, 10);\r\n            updateState({ currentTextSize: newSize });\r\n            textSizeValueDisplay.textContent = `${newSize}px`;\r\n            const ctx = getContext();\r\n            if (ctx) ctx.font = `${newSize}px ${getState().currentFont}`;\r\n        });\r\n    }\r\n\r\n    // Clear button\r\n    const clearButton = toolbarElement.querySelector('#overdraw-clear');\r\n    if (clearButton) {\r\n        clearButton.addEventListener('click', () => {\r\n            if (confirm('Are you sure you want to clear the canvas?')) {\r\n                clearDrawingArea();\r\n                resetUndoRedoHistory(getCanvas());\r\n            }\r\n        });\r\n    }\r\n\r\n    // Undo button\r\n    const undoButton = toolbarElement.querySelector('#overdraw-undo');\r\n    if (undoButton) {\r\n        undoButton.addEventListener('click', () => undoLastAction(getCanvas(), getContext()));\r\n    }\r\n\r\n    // Redo button\r\n    const redoButton = toolbarElement.querySelector('#overdraw-redo');\r\n    if (redoButton) {\r\n        redoButton.addEventListener('click', () => redoLastAction(getCanvas(), getContext()));\r\n    }\r\n\r\n    // Minimize/Expand button\r\n    const minimizeButton = toolbarElement.querySelector('#overdraw-minimize');\r\n    if (minimizeButton) {\r\n        minimizeButton.addEventListener('click', toggleBoardMinimize);\r\n    }\r\n    console.log('Toolbar initialized and events bound.');\r\n}\r\n\r\n/**\r\n * Handles changes from the color picker.\r\n */\r\nfunction handleColorChange(event) {\r\n    const newColor = event.target.value;\r\n    updateState({ currentColor: newColor });\r\n    const ctx = getContext();\r\n    if (ctx) {\r\n        ctx.strokeStyle = newColor;\r\n        ctx.fillStyle = newColor;\r\n    }\r\n}\r\n\r\n/**\r\n * Handles the final color selection.\r\n */\r\nfunction handleColorChangeFinal(event) {\r\n    handleColorChange(event);\r\n    console.log(\"Final color selected:\", event.target.value);\r\n}\r\n\r\n/**\r\n * Toggles the minimized state of the drawing board and parts of the toolbar.\r\n */\r\nfunction toggleBoardMinimize() {\r\n    try {\r\n        const state = getState();\r\n        const isMinimized = !state.isToolbarMinimized; // Toggle the state\r\n        updateState({ isToolbarMinimized: isMinimized });\r\n\r\n        const minimizeButton = toolbarElement.querySelector('#overdraw-minimize');\r\n\r\n        if (isMinimized) {\r\n            boardElementRef.style.display = 'none'; // Hide the canvas board\r\n            // Hide specific tool groups, keep essential controls like minimize\r\n            toolbarElement.querySelectorAll('.tool-group').forEach(group => group.style.display = 'none');\r\n            if (minimizeButton) minimizeButton.innerHTML = '=>';\r\n            document.documentElement.style.overflow = ''; // Allow page scrolling\r\n            updateState({ isBoardActive: false }); // Board is not actively usable when minimized\r\n            deactivateTextToolIfNeeded(); // Remove any active text input when minimizing\r\n        } else {\r\n            boardElementRef.style.display = 'block'; // Show the canvas board\r\n            resizeCanvas(); // Ensure canvas is correctly sized after display block\r\n            toolbarElement.querySelectorAll('.tool-group').forEach(group => group.style.display = 'flex');\r\n            if (minimizeButton) minimizeButton.innerHTML = '<=';\r\n            document.documentElement.style.overflow = 'hidden'; // Prevent page scrolling\r\n            updateState({ isBoardActive: true }); // Board is active again\r\n        }\r\n        console.log(`Board minimized: ${isMinimized}`);\r\n    } catch (err) {\r\n        console.error('Error in toggleBoardMinimize:', err);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Shows or hides the entire toolbar based on overall extension enabled state.\r\n * @param {boolean} show - True to show, false to hide.\r\n */\r\nexport function setOverallToolbarVisibility(show) {\r\n    if (toolbarElement) {\r\n        if (show) {\r\n            toolbarElement.style.display = 'flex'; // Use flex as per CSS\r\n        } else {\r\n            toolbarElement.style.display = 'none';\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Resets the toolbar to its default (non-minimized) visual state.\r\n * Called when the extension is enabled via F9.\r\n */\r\nexport function resetToolbarToDefaultState() {\r\n    updateState({ isToolbarMinimized: false }); // Ensure state is not minimized\r\n    if (toolbarElement) {\r\n        const minimizeButton = toolbarElement.querySelector('#overdraw-minimize');\r\n        if (minimizeButton) minimizeButton.innerHTML = '<=';\r\n        toolbarElement.querySelectorAll('.tool-group').forEach(group => group.style.display = 'flex');\r\n    }\r\n}", "/**\r\n * @fileoverview Helper functions for interacting with chrome.storage.local.\r\n */\r\n\r\n/**\r\n * Gets a value from chrome.storage.local.\r\n * @param {string} key - The key of the item to retrieve.\r\n * @returns {Promise<any>} A promise that resolves with the value, or undefined.\r\n */\r\nexport async function getStorage(key) {\r\n    try {\r\n        const result = await chrome.storage.local.get(key);\r\n        return result[key];\r\n    } catch (error) {\r\n        console.error(`Error getting item ${key} from storage:`, error);\r\n        return undefined;\r\n    }\r\n}\r\n\r\n/**\r\n * Sets a value in chrome.storage.local.\r\n * @param {string} key - The key of the item to set.\r\n * @param {any} value - The value to set.\r\n * @returns {Promise<void>} A promise that resolves when the item is set.\r\n */\r\nexport async function setStorage(key, value) {\r\n    try {\r\n        await chrome.storage.local.set({ [key]: value });\r\n    } catch (error) {\r\n        console.error(`Error setting item ${key} in storage:`, error);\r\n    }\r\n}", "/**\r\n * @fileoverview Manages the display of a first-run guide modal.\r\n */\r\nimport { getStorage, setStorage } from '../utils/storage.js';\r\nimport { GUIDE_MODAL_ID, STORAGE_KEY_GUIDE_SEEN } from '../core/constants.js';\r\n\r\nlet guideModalElement = null;\r\n\r\n/**\r\n * Creates the DOM for the first-run guide modal if it doesn't exist.\r\n */\r\nfunction createGuideModalDOM() {\r\n    if (document.getElementById(GUIDE_MODAL_ID)) {\r\n        guideModalElement = document.getElementById(GUIDE_MODAL_ID);\r\n        return;\r\n    }\r\n\r\n    guideModalElement = document.createElement('div');\r\n    guideModalElement.id = GUIDE_MODAL_ID;\r\n    guideModalElement.innerHTML = `\r\n        <h3>Welcome to OverDraw Enhanced!</h3>\r\n        <p>Here are some quick tips to get you started:</p>\r\n        <ul>\r\n            <li>Press <strong>F9</strong> to toggle the drawing board on and off.</li>\r\n            <li>Use the toolbar to select tools (Brush, Eraser, Text).</li>\r\n            <li>Adjust color and brush/text size using the controls.</li>\r\n            <li>Undo/Redo your actions with the arrow buttons.</li>\r\n            <li>Clear the canvas with the trash icon.</li>\r\n        </ul>\r\n        <button id=\"overdraw-guide-close\">Got it!</button>\r\n    `;\r\n    document.body.appendChild(guideModalElement);\r\n\r\n    const closeButton = guideModalElement.querySelector('#overdraw-guide-close');\r\n    if (closeButton) {\r\n        closeButton.addEventListener('click', hideGuideModal);\r\n    }\r\n}\r\n\r\n/**\r\n * Shows the first-run guide modal.\r\n */\r\nfunction showGuideModal() {\r\n    if (!guideModalElement) createGuideModalDOM();\r\n    if (guideModalElement) {\r\n        guideModalElement.style.display = 'block';\r\n    }\r\n}\r\n\r\n/**\r\n * Hides the first-run guide modal and marks it as seen.\r\n */\r\nfunction hideGuideModal() {\r\n    if (guideModalElement) {\r\n        guideModalElement.style.display = 'none';\r\n    }\r\n    setStorage(STORAGE_KEY_GUIDE_SEEN, true);\r\n}\r\n\r\n/**\r\n * Checks if the guide has been seen and shows it if not.\r\n * Should be called when the drawing board is first enabled.\r\n */\r\nexport async function checkAndShowFirstRunGuide() {\r\n    const hasSeenGuide = await getStorage(STORAGE_KEY_GUIDE_SEEN);\r\n    if (!hasSeenGuide) {\r\n        showGuideModal();\r\n    }\r\n}", "/**\r\n * @fileoverview Handles mouse and touch input events on the canvas.\r\n */\r\nimport { getState, updateState, resetDrawingState } from '../core/state.js';\r\nimport { getContext, getCanvas } from './canvasContext.js';\r\nimport { applyCurrentTool, deactivateTextToolIfNeeded } from '../tools/toolManager.js';\r\nimport { TOOL_TEXT } from '../core/constants.js';\r\nimport { recordCanvasState } from './undoRedo.js';\r\n\r\nlet ongoingTouches = []; // To store active touch points\r\n\r\n/**\r\n * Copies relevant properties from a Touch object.\r\n * @param {Touch} touch - The original Touch object.\r\n * @returns {{identifier: number, pageX: number, pageY: number, clientX: number, clientY: number}} A simplified touch object.\r\n */\r\nfunction copyTouch(touch) {\r\n    return { identifier: touch.identifier, pageX: touch.pageX, pageY: touch.pageY, clientX: touch.clientX, clientY: touch.clientY };\r\n}\r\n\r\n/**\r\n * Finds the index of an ongoing touch by its identifier.\r\n * @param {number} idToFind - The identifier of the touch to find.\r\n * @returns {number} The index of the touch, or -1 if not found.\r\n */\r\nfunction ongoingTouchIndexById(idToFind) {\r\n    for (let i = 0; i < ongoingTouches.length; i++) {\r\n        if (ongoingTouches[i].identifier === idToFind) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1; // not found\r\n}\r\n\r\n\r\n/**\r\n * Gets the mouse position relative to the canvas.\r\n * @param {MouseEvent} event - The mouse event.\r\n * @returns {{x: number, y: number}} The x and y coordinates.\r\n */\r\nfunction getMousePosition(event) {\r\n    const canvas = getCanvas();\r\n    if (!canvas) return { x: 0, y: 0 };\r\n    const rect = canvas.getBoundingClientRect();\r\n    return {\r\n        x: event.clientX - rect.left,\r\n        y: event.clientY - rect.top\r\n    };\r\n}\r\n\r\n/**\r\n * Handles the mousedown event on the canvas.\r\n * @param {MouseEvent} event - The mousedown event.\r\n */\r\nexport function handleMouseDown(event) {\r\n    if (event.button !== 0) return; // Only main (left) click\r\n\r\n    // deactivateTextToolIfNeeded(); // Temporarily disabled for debugging\r\n\r\n    const { x, y } = getMousePosition(event);\r\n    const state = getState();\r\n    const ctx = getContext();\r\n\r\n    updateState({ isDrawing: true, lastX: x, lastY: y });\r\n\r\n    if (state.currentTool !== TOOL_TEXT) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(x, y);\r\n        // For tools like brush/eraser, apply might draw a dot on click\r\n        applyCurrentTool(x, y, x, y); // Draw a dot if tool supports it\r\n    } else {\r\n        // Text tool handles its own click logic via toolManager\r\n        applyCurrentTool(x, y);\r\n    }\r\n}\r\n\r\n/**\r\n * Handles the mousemove event on the canvas.\r\n * @param {MouseEvent} event - The mousemove event.\r\n */\r\nexport function handleMouseMove(event) {\r\n    const state = getState();\r\n    if (!state.isDrawing || state.currentTool === TOOL_TEXT) return;\r\n\r\n    const { x, y } = getMousePosition(event);\r\n    applyCurrentTool(state.lastX, state.lastY, x, y);\r\n    updateState({ lastX: x, lastY: y });\r\n}\r\n\r\n/**\r\n * Handles the mouseup event on the canvas.\r\n */\r\nexport function handleMouseUp() {\r\n    const state = getState();\r\n    if (state.isDrawing && state.currentTool !== TOOL_TEXT) {\r\n        recordCanvasState(getCanvas());\r\n    }\r\n    resetDrawingState();\r\n}\r\n\r\n/**\r\n * Handles the touchstart event on the canvas.\r\n * @param {TouchEvent} event - The touchstart event.\r\n */\r\nexport function handleTouchStart(event) {\r\n    event.preventDefault(); // Prevent default touch actions (scrolling, zooming)\r\n    deactivateTextToolIfNeeded();\r\n\r\n    const touches = event.changedTouches;\r\n    const canvas = getCanvas();\r\n    const ctx = getContext();\r\n    const state = getState();\r\n    if (!canvas || !ctx) return;\r\n\r\n    for (let i = 0; i < touches.length; i++) {\r\n        ongoingTouches.push(copyTouch(touches[i]));\r\n        const rect = canvas.getBoundingClientRect();\r\n        const x = touches[i].clientX - rect.left;\r\n        const y = touches[i].clientY - rect.top;\r\n\r\n        if (state.currentTool !== TOOL_TEXT) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(x, y);\r\n            applyCurrentTool(x, y, x, y); // Draw a dot\r\n        } else {\r\n            applyCurrentTool(x, y); // Text tool handles its own placement\r\n        }\r\n    }\r\n    updateState({ isDrawing: true }); // General drawing flag\r\n}\r\n\r\n/**\r\n * Handles the touchmove event on the canvas.\r\n * @param {TouchEvent} event - The touchmove event.\r\n */\r\nexport function handleTouchMove(event) {\r\n    event.preventDefault();\r\n    const state = getState();\r\n    if (!state.isDrawing || state.currentTool === TOOL_TEXT) return;\r\n\r\n    const touches = event.changedTouches;\r\n    const canvas = getCanvas();\r\n    const ctx = getContext();\r\n    if (!canvas || !ctx) return;\r\n\r\n    for (let i = 0; i < touches.length; i++) {\r\n        const touch = touches[i];\r\n        const idx = ongoingTouchIndexById(touch.identifier);\r\n\r\n        if (idx >= 0) {\r\n            const rect = canvas.getBoundingClientRect();\r\n            const prevX = ongoingTouches[idx].clientX - rect.left;\r\n            const prevY = ongoingTouches[idx].clientY - rect.top;\r\n            const currentX = touch.clientX - rect.left;\r\n            const currentY = touch.clientY - rect.top;\r\n\r\n            applyCurrentTool(prevX, prevY, currentX, currentY);\r\n            ongoingTouches.splice(idx, 1, copyTouch(touch)); // Update touch\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Handles the touchend or touchcancel event on the canvas.\r\n * @param {TouchEvent} event - The touchend or touchcancel event.\r\n */\r\nexport function handleTouchEnd(event) {\r\n    event.preventDefault();\r\n    const touches = event.changedTouches;\r\n    const state = getState();\r\n\r\n    for (let i = 0; i < touches.length; i++) {\r\n        const idx = ongoingTouchIndexById(touches[i].identifier);\r\n        if (idx >= 0) {\r\n            ongoingTouches.splice(idx, 1); // Remove from active touches\r\n        }\r\n    }\r\n\r\n    if (ongoingTouches.length === 0) { // All fingers lifted\r\n        if (state.isDrawing && state.currentTool !== TOOL_TEXT) {\r\n            recordCanvasState(getCanvas());\r\n        }\r\n        resetDrawingState();\r\n    }\r\n}", "/**\r\n * @fileoverview Binds event listeners to the canvas element.\r\n */\r\nimport { getCanvas } from './canvasContext.js';\r\nimport { handleMouseDown, handleMouseMove, handleMouseUp, handleTouchStart, handleTouchMove, handleTouchEnd } from './inputHandler.js';\r\nimport { resizeCanvas } from './canvasContext.js';\r\n\r\n/**\r\n * Attaches all necessary event listeners to the canvas.\r\n */\r\nexport function bindCanvasEvents() {\r\n    const canvas = getCanvas();\r\n    if (!canvas) {\r\n        console.error(\"Canvas not found for event binding.\");\r\n        return;\r\n    }\r\n\r\n    // Mouse events\r\n    canvas.addEventListener('mousedown', handleMouseDown);\r\n    canvas.addEventListener('mousemove', handleMouseMove);\r\n    canvas.addEventListener('mouseup', handleMouseUp);\r\n    canvas.addEventListener('mouseleave', handleMouseUp); // Treat leaving canvas as mouseup\r\n\r\n    // Touch events\r\n    canvas.addEventListener('touchstart', handleTouchStart, { passive: false });\r\n    canvas.addEventListener('touchmove', handleTouchMove, { passive: false });\r\n    canvas.addEventListener('touchend', handleTouchEnd, { passive: false });\r\n    canvas.addEventListener('touchcancel', handleTouchEnd, { passive: false }); // Treat cancel as end\r\n\r\n    // Window resize event\r\n    window.addEventListener('resize', resizeCanvas);\r\n    console.log('Canvas events bound.');\r\n}\r\n\r\n/**\r\n * Removes all event listeners from the canvas.\r\n */\r\nexport function unbindCanvasEvents() {\r\n    const canvas = getCanvas();\r\n    if (!canvas) return;\r\n\r\n    canvas.removeEventListener('mousedown', handleMouseDown);\r\n    canvas.removeEventListener('mousemove', handleMouseMove);\r\n    canvas.removeEventListener('mouseup', handleMouseUp);\r\n    canvas.removeEventListener('mouseleave', handleMouseUp);\r\n\r\n    canvas.removeEventListener('touchstart', handleTouchStart);\r\n    canvas.removeEventListener('touchmove', handleTouchMove);\r\n    canvas.removeEventListener('touchend', handleTouchEnd);\r\n    canvas.removeEventListener('touchcancel', handleTouchEnd);\r\n\r\n    window.removeEventListener('resize', resizeCanvas);\r\n    console.log('Canvas events unbound.');\r\n}", "/**\r\n * @fileoverview Main entry point for the OverDraw Enhanced extension.\r\n * Initializes and coordinates all modules.\r\n */\r\n\r\n// Core\r\nimport { getState, updateState } from './core/state.js';\r\nimport { TOOL_BRUSH, BOARD_ID, TOOLBAR_ID } from './core/constants.js';\r\n\r\n// UI\r\n// import { ensureStylesInjected } from './ui/styleManager.js'; // Not strictly needed with manifest CSS\r\nimport { createBoardElement, createToolbarElement } from './ui/domElements.js';\r\nimport { initializeToolbar, setOverallToolbarVisibility, resetToolbarToDefaultState } from './ui/toolbarController.js';\r\nimport { checkAndShowFirstRunGuide } from './ui/firstRunGuide.js';\r\n\r\n// Canvas\r\nimport { initializeCanvas, clearDrawingArea, getCanvas, resizeCanvas } from './canvas/canvasContext.js';\r\nimport { bindCanvasEvents, unbindCanvasEvents } from './canvas/eventBinder.js';\r\nimport { resetUndoRedoHistory } from './canvas/undoRedo.js';\r\n\r\n// Tools\r\nimport { setCurrentTool, deactivateTextToolIfNeeded } from './tools/toolManager.js';\r\n\r\nlet boardElement = null; // Direct reference to the board div\r\nlet toolbarElement = null; // Direct reference to the toolbar div\r\n\r\n/**\r\n * Enables the drawing board extension (called by F9).\r\n * This makes the toolbar visible and prepares the board.\r\n */\r\nfunction enableExtension() {\r\n    if (getState().isExtensionEnabled) return;\r\n\r\n    boardElement = document.getElementById(BOARD_ID);\r\n    toolbarElement = document.getElementById(TOOLBAR_ID);\r\n\r\n    if (!boardElement || !toolbarElement) {\r\n        console.error(\"Board or Toolbar element not found during enableExtension\");\r\n        return;\r\n    }\r\n\r\n    // Initial setup from main2.js enable()\r\n    toolbarElement.style.display = 'flex'; // Use 'flex' as per our CSS for the toolbar\r\n    boardElement.style.zIndex = '9999990'; // High z-index for board\r\n    boardElement.style.top = '0';\r\n    boardElement.style.display = 'block'; // Ensure board (canvas container) is visible\r\n\r\n    document.documentElement.style.overflow = 'hidden'; // Prevent page scrolling\r\n\r\n    updateState({ isExtensionEnabled: true, isBoardActive: true, isToolbarMinimized: false }); // Board active by default on enable\r\n    resetToolbarToDefaultState(); // Ensure toolbar is not in minimized visual state\r\n\r\n    const canvasData = initializeCanvas(); // Initialize canvas context, size, etc.\r\n    if (canvasData) {\r\n        bindCanvasEvents();\r\n        resetUndoRedoHistory(canvasData.canvas);\r\n        setCurrentTool(TOOL_BRUSH);\r\n        resizeCanvas(); // Ensure canvas is sized correctly\r\n    }\r\n\r\n    checkAndShowFirstRunGuide();\r\n    console.log('OverDraw extension enabled.');\r\n}\r\n\r\n/**\r\n * Disables the drawing board extension (called by F9).\r\n * This hides everything and cleans up.\r\n */\r\nfunction disableExtension() {\r\n    if (!getState().isExtensionEnabled) return;\r\n\r\n    deactivateTextToolIfNeeded(); // Finalize any active text input\r\n\r\n    if (boardElement && toolbarElement) {\r\n        // From main2.js disable()\r\n        toolbarElement.style.display = 'none';\r\n        boardElement.style.zIndex = '-99999'; // Send board behind\r\n        boardElement.style.top = '-200vh';    // Move board out of view\r\n        // boardElement.style.display = 'block'; // Or 'none' if preferred when fully disabled\r\n    }\r\n\r\n    unbindCanvasEvents();\r\n    document.documentElement.style.overflow = ''; // Restore page scrolling\r\n    updateState({ isExtensionEnabled: false, isBoardActive: false });\r\n    console.log('OverDraw extension disabled.');\r\n}\r\n\r\n\r\n/**\r\n * Handles the F9 key press to toggle the board.\r\n * @param {KeyboardEvent} event\r\n */\r\nfunction handleGlobalKeyDown(event) {\r\n    if (event.key === 'F9') {\r\n        event.preventDefault();\r\n        const state = getState();\r\n        if (!state.isExtensionEnabled) { // If extension is completely off\r\n            if (confirm('Enable OverDraw board?')) {\r\n                enableExtension();\r\n            }\r\n        } else { // If extension is on (could be minimized or active)\r\n            if (confirm('Disable OverDraw board?')) {\r\n                disableExtension();\r\n            }\r\n        }\r\n    } else if (getState().isBoardActive) { // Shortcuts only if board is actively usable\r\n        if (event.ctrlKey && event.key === 'z') { // Ctrl+Z for Undo\r\n            event.preventDefault();\r\n            const undoButton = document.getElementById('overdraw-undo');\r\n            if (undoButton && !undoButton.disabled) undoButton.click();\r\n        } else if (event.ctrlKey && event.key === 'y') { // Ctrl+Y for Redo\r\n            event.preventDefault();\r\n            const redoButton = document.getElementById('overdraw-redo');\r\n            if (redoButton && !redoButton.disabled) redoButton.click();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Initializes the entire extension.\r\n * Creates DOM elements, sets up initial state.\r\n */\r\nfunction initializeExtensionFramework() {\r\n    console.log('Initializing OverDraw Enhanced Framework...');\r\n    // ensureStylesInjected(); // CSS handled by manifest\r\n\r\n    // Create DOM elements once\r\n    boardElement = createBoardElement();\r\n    toolbarElement = createToolbarElement();\r\n\r\n    initializeToolbar(); // Setup toolbar event listeners and logic\r\n\r\n    document.addEventListener('keydown', handleGlobalKeyDown);\r\n\r\n    console.log('OverDraw Enhanced framework initialized. Press F9 to toggle.');\r\n}\r\n\r\n// --- Start the extension ---\r\nif (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', initializeExtensionFramework);\r\n} else {\r\n    initializeExtensionFramework();\r\n}"],
  "mappings": "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",
  "names": ["canvas", "boardElement", "canvas", "ctx", "ctx", "ctx", "textInputElement", "canvas", "textInputElement", "placeTextOnCanvas", "textInputElement", "ctx", "canvas", "canvas", "textInputElement", "ctx", "getMousePosition", "canvas", "ctx", "canvas", "toolbarElement"]
}
